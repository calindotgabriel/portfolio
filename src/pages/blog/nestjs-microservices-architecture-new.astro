---
import ProjectLayout from "../../components/ProjectLayout.astro";

const postData = {
  title: "Building Scalable Microservices with NestJS and MongoDB",
  description: "How we migrated a legacy monolith to NestJS microservices, reducing response times by 70%",
  publishDate: new Date("2024-08-23"),
  tags: ["NestJS", "Microservices", "MongoDB", "Azure"],
  author: "Călin Gabriel"
};
---

<ProjectLayout title={postData.title} description={postData.description}>
  <article class="blog-post" style="margin-top: 3rem;">
    <header class="blog-header">
      <h1 class="blog-title">
        {postData.title}
      </h1>
      <p class="blog-description">
        {postData.description}
      </p>
      <div class="blog-meta">
        <time>{postData.publishDate.toLocaleDateString()}</time>
        <span class="author">by {postData.author}</span>
      </div>
      <div class="blog-tags">
        {
          postData.tags.map((tag: string) => (
            <span class="blog-tag">{tag}</span>
          ))
        }
      </div>
    </header>

    <div class="blog-content">
      <div class="prose">
        <h2>Business Challenge</h2>
        <p><strong>At RWE Energy</strong>, our legacy Java monolith was struggling with 15,000+ daily queries. Critical issues included:</p>
        <ul>
          <li><strong>45+ minute export times</strong> - unacceptable for business operations</li>
          <li><strong>Memory crashes during peak loads</strong> - system unavailable during critical hours</li>
          <li><strong>Monolithic deployment</strong> - minor updates required full system redeployment</li>
        </ul>

        <h2>Technical Solution: NestJS Microservices</h2>
        <p><strong>Why NestJS:</strong> Enterprise-grade TypeScript framework with built-in dependency injection, decorators, and excellent MongoDB integration.</p>

        <h3>Architecture Overview</h3>
        <ul>
          <li><strong>API Gateway</strong> - Request routing and authentication (JWT)</li>
          <li><strong>User Service</strong> - Authentication, profiles, permissions</li>
          <li><strong>Data Processing Service</strong> - Heavy computations and exports</li>
          <li><strong>Notification Service</strong> - Email, SMS, push notifications</li>
        </ul>

        <h3>Key Technical Implementation</h3>
        <pre><code>// MongoDB connection with connection pooling
@Module({
  imports: [
    MongooseModule.forRoot(process.env.MONGODB_URI, {
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
    }),
  ],
})

// Service with caching
@Injectable()
export class DataService {
  @Cacheable(600) // 10 minutes cache
  async getReports(): Promise&lt;Report[]&gt; {
    return this.reportModel.find().lean();
  }
}</code></pre>

        <h2>Business Results</h2>
        <div class="results-grid">
          <div class="metric">
            <span class="number">70%</span>
            <span class="label">Response Time Reduction</span>
          </div>
          <div class="metric">
            <span class="number">45min → 12min</span>
            <span class="label">Export Time</span>
          </div>
          <div class="metric">
            <span class="number">99.9%</span>
            <span class="label">System Uptime</span>
          </div>
        </div>

        <h3>Azure Deployment</h3>
        <p><strong>Production Setup:</strong> Azure Container Instances with Application Gateway for load balancing. MongoDB Atlas for managed database with automatic failover.</p>

        <pre><code>// Docker deployment
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY dist ./dist
EXPOSE 3000
CMD ["node", "dist/main"]</code></pre>

        <h2>Key Takeaways</h2>
        <ul>
          <li><strong>Microservices aren't always the answer</strong> - evaluate complexity vs. benefits</li>
          <li><strong>Database design matters</strong> - proper indexing reduced query times by 60%</li>
          <li><strong>Monitoring is crucial</strong> - implemented comprehensive logging with Azure Application Insights</li>
          <li><strong>Team adoption</strong> - TypeScript made transition smoother for Java developers</li>
        </ul>

        <div class="cta-section">
          <p><strong>Need help with a similar migration?</strong> I specialize in modernizing legacy systems with proven results. Let's discuss your project.</p>
        </div>
      </div>
    </div>
  </article>
</ProjectLayout>

<style>
  .blog-post {
    max-width: 900px;
    margin: 0 auto;
    padding: 0 24px 3rem;
    color: var(--text-primary);
    line-height: 1.7;
  }

  .blog-header {
    margin-bottom: 3rem;
    padding-bottom: 2rem;
    border-bottom: 2px solid var(--gradient-primary);
    background: var(--gradient-card);
    border-radius: 16px;
    padding: 2.5rem 2rem;
    box-shadow: var(--shadow-lg);
  }

  .blog-title {
    font-size: 2.5rem;
    font-weight: 800;
    margin-bottom: 1rem;
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1.2;
  }

  .blog-description {
    font-size: 1.25rem;
    color: var(--gray);
    margin-bottom: 1.5rem;
    font-weight: 500;
  }

  .blog-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
    font-size: 0.95rem;
    color: var(--gray);
  }

  .author {
    font-weight: 600;
    color: var(--primary);
  }

  .blog-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }

  .blog-tag {
    background: rgba(99, 102, 241, 0.1);
    color: var(--primary);
    padding: 0.5rem 1rem;
    border-radius: 50px;
    font-size: 0.85rem;
    font-weight: 600;
    border: 1px solid rgba(99, 102, 241, 0.2);
  }

  .blog-content {
    max-width: 100%;
  }

  .prose {
    font-size: 1.1rem;
    line-height: 1.8;
  }

  .prose h2 {
    font-size: 1.75rem;
    font-weight: 700;
    margin: 2.5rem 0 1rem;
    color: var(--text-primary);
    position: relative;
  }

  .prose h2:after {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 0;
    width: 60px;
    height: 3px;
    background: var(--gradient-primary);
    border-radius: 2px;
  }

  .prose h3 {
    font-size: 1.35rem;
    font-weight: 600;
    margin: 2rem 0 1rem;
    color: var(--text-primary);
  }

  .prose p {
    margin-bottom: 1.5rem;
    color: var(--text-secondary);
  }

  .prose ul {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }

  .prose li {
    margin-bottom: 0.75rem;
    color: var(--text-secondary);
  }

  .prose strong {
    color: var(--text-primary);
    font-weight: 600;
  }

  .prose pre {
    background: var(--code-bg);
    border-radius: 12px;
    padding: 1.5rem;
    margin: 1.5rem 0;
    overflow-x: auto;
    border: 1px solid var(--border);
    font-size: 0.9rem;
    line-height: 1.6;
  }

  .prose code {
    color: var(--code-text);
    font-family: 'Fira Code', 'Menlo', 'Monaco', monospace;
  }

  .results-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin: 2rem 0;
  }

  .metric {
    background: var(--gradient-card);
    padding: 1.5rem;
    border-radius: 12px;
    text-align: center;
    box-shadow: var(--shadow-md);
    border: 1px solid rgba(99, 102, 241, 0.1);
  }

  .metric .number {
    display: block;
    font-size: 2rem;
    font-weight: 800;
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 0.5rem;
  }

  .metric .label {
    font-size: 0.95rem;
    font-weight: 600;
    color: var(--text-secondary);
  }

  .cta-section {
    background: var(--gradient-card);
    padding: 2rem;
    border-radius: 16px;
    margin-top: 3rem;
    text-align: center;
    border: 2px solid rgba(99, 102, 241, 0.1);
  }

  .cta-section p {
    margin: 0;
    font-size: 1.1rem;
    color: var(--text-primary);
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .blog-post {
      padding: 0 16px 2rem;
    }

    .blog-header {
      padding: 2rem 1.5rem;
      margin-bottom: 2rem;
    }

    .blog-title {
      font-size: 2rem;
    }

    .blog-description {
      font-size: 1.1rem;
    }

    .blog-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .prose {
      font-size: 1rem;
    }

    .prose h2 {
      font-size: 1.5rem;
    }

    .prose h3 {
      font-size: 1.25rem;
    }

    .results-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .metric .number {
      font-size: 1.75rem;
    }
  }

  /* Smooth animations */
  .blog-header,
  .blog-content {
    animation: fadeInUp 0.6s ease forwards;
  }

  .blog-content {
    animation-delay: 0.2s;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
